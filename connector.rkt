#lang racket/base
(require "generic.rkt" racket/contract)
(provide (contract-out
          #:exists connector
          (make-connector (-> connector))
          (set-value! (-> connector field-instance? any/c any))
          (forget-value! (-> connector any/c any))
          (connect! (-> connector any/c any))
          (has-value? (-> connector any))
          (value (-> connector any))))

(define (make-connector)
  (let ((value (box #f)) (has-value? (box #f)) (constraints (box null)))
    (define-syntax-rule (cond-for ((id seq)) clause ...)
      (for ((id seq))
        (cond clause ...)))
    (define (inform-constraints! msg setter)
      (cond-for ((c (in-list (unbox constraints))))
                ((not (eq? setter c)) (c msg))))
    
    (define (set-value! newval setter)
      (cond ((not (unbox has-value?)) (set-box! value newval) (set-box! has-value? setter) (inform-constraints! 'inform-value setter))
            ((not (equal (unbox value) newval)) (raise (make-exn:fail:contract "A different object is provided." (current-continuation-marks))))))
    (define (forget-value! setter)
      (cond ((eq? setter (unbox has-value?))
             (set-box! has-value? #f)
             (inform-constraints! 'inform-no-value setter))))
    (define (connect! new)
      (define old (unbox constraints))
      (cond ((not (member new old eq?))
             (set-box! constraints (cons new old))
             (cond ((unbox has-value?) (new 'inform-value))))))

    (define (self msg)
      (case msg
        ((set-value!) set-value!)
        ((forget-value!) forget-value!)
        ((connect!) connect!)
        ((has-value?) (unbox has-value?))
        ((value) (unbox value))
        (else (raise (make-exn:fail:unsupported (format "Unknown operation ~a." msg) (current-continuation-marks))))))
    self))

(define (set-value! conn val setter)
  ((conn 'set-value!) val setter))
(define (forget-value! conn setter)
  ((conn 'forget-value!) setter))
(define (connect! conn cons)
  ((conn 'connect!) cons))
(define (has-value? conn)
  (conn 'has-value?))
(define (value conn)
  (conn 'value))
