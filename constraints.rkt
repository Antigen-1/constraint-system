#lang racket/base
(require "connector.rkt" "generic.rkt" racket/contract racket/bool)
(provide (contract-out (adder constraint/c)
                       (multiplier constraint/c)
                       (divider constraint/c)
                       (constant (-> field-instance? any/c any))
                       (probe (->* ((or/c symbol? string?) any/c) (#:printer (-> any/c any)) any))))

(define constraint/c (opt/c (->i ((c1 any/c) (c2 any/c) (result any/c))
                                 #:pre (c1 c2 result) (nor (connector=? c1 c2) (connector=? c1 result) (connector=? c2 result))
                                 any)))

(define ((make-constraint accumulator inverse) c1 c2 result)
  (define (process-new-value)
    (cond ((and (has-value? c1) (has-value? c2))
           (set-value! result (accumulator (value c1) (value c2)) self))
          ((and (has-value? c1) (has-value? result))
           (set-value! c2 (inverse (value result) (value c1)) self))
          ((and (has-value? c2) (has-value? result))
           (set-value! c1 (inverse (value result) (value c2)) self))))
  (define (process-forget-value)
    (forget-value! result self)
    (forget-value! c1 self)
    (forget-value! c2 self)
    (process-new-value))
  (define (self msg)
    (case msg
      ((inform-value) (process-new-value))
      ((inform-no-value) (process-forget-value))
      (else (raise (make-exn:fail:unsupported (format "Unknown operation ~a." msg) (current-continuation-marks))))))
  (connect! c1 self)
  (connect! c2 self)
  (connect! result self))

(define adder (make-constraint add sub))
(define multiplier (make-constraint mul div))
(define divider (make-constraint div mul))

(define (constant value connector)
  (define (self msg)
    (raise (make-exn:fail:unsupported (format "Unknown operation ~a." msg) (current-continuation-marks))))
  (connect! connector self)
  (set-value! connector value self))

(define (probe name connector #:printer (printer display))
  (define (print-probe value printer)
    (display (format "Probe: ~a = " name))
    (printer value)
    (newline))
  (define (process-new-value)
    (print-probe (value connector) printer))
  (define (process-forget-value)
    (print-probe "?" display))
  (define (self msg)
    (case msg
      ((inform-value) (process-new-value))
      ((inform-no-value) (process-forget-value))
      (else (raise (make-exn:fail:unsupported (format "Unknown operation ~a." msg) (current-continuation-marks))))))
  (connect! connector self))
